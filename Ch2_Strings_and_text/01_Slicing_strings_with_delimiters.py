"""
    Задача. Нужно разделить строку на поля, но разделители (и пробелы вокруг них) внутри строки разные.
    Решение. Функция split() на строковом объекте предназначена для очень простых случаев: не допускает использования
    нескольких разделитей и не учитывает возможные пробелы вокруг разделителей. В случаях, когда нам нужно немного
    больше гибкости, можно истользовать метод re.split()
"""
import re

line = 'asdf fgjdk; afed,  fjek,asdf      foo'
print(re.split(r'[;,\s]\s*', line))
"""
    Примечание. Функция re.split в этом случае может быть очень полезной так как мы можем определить многочисленные 
    шаблоны разделителей.
    r'[;,\s]\s*' - разделителями могут быть ; , или пробелы, за которым следует любое количество пробелов.
    Мы должны быть осторожны, если шаблон регулярного выражения использует группу, заключенные в скобки. 
    При использовании групп совпавший с шаблоном текст также включается в результат!
"""
# Например:
fields: list[str] = re.split(r'(;|,|\s)\s*', line)
print(fields)
"""
    Примечание. получение символов-разделителей может быть полезным в некоторых обстоятельствах. Например, нам могут 
    потребоваться эти символы позже  - для переформатирования переводимой строки.
"""
values = fields[::2]
delimiters = fields[1::2] + ['']
print(f'{values=}')
print(f'{delimiters=}')
# Переформатируем строку используя те же разделители
result = ''.join(v+d for v, d in zip(values, delimiters))
print(result)
"""
    Примечание. Если мы не хотим, что бы разделители попали в результат, но при этом нам нужно применить группы в  
    шаблоне регулярного выражения, необходимо использовать незахватывающую (noncapture) группу, которая определяется
    (?:...)
"""
print(re.split(r'(?:,|;|\s)\s*', line))
