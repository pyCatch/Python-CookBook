"""
    Задача. У нас есть много словарей или отображений, которые мы хотим логически объединить в одно отображение, что бы
    выполнить некоторые операции, такие как поиск значений или проверка существования ключей.
    Предположим, что мы имеем:
    a = {'x': 1, 'z': 3}
    b = {'y': 2, 'z': 4}
    Мы хотим провести поиски, в ходе которых нам нужно проверить оба словаря (то есть сначала надо проверить в
    словаре а, а потом в b, если в первом словаре искомое не найдено).
"""
from collections import ChainMap

a = {'x': 1, 'z': 3}
b = {'y': 2, 'z': 4}
c = ChainMap(a, b)
print(f'Type:: {type(c)}')
print(f'{c["x"]=}')
print(f'{c["y"]=}')
print(f'{c["z"]=}')
print('-'*20)
"""
    Примечание. ChainMap принимает несколько значений отображения и делает их логически единым целым. 
    Но они не сливаются! Вместо этого просто содержит список отображений и переопределяет обычные операции над словарями 
    для сканирования данного списка.
"""
print(f'Len:: {len(c)}')
print(f'Keys:: {list(c.keys())}')
print(f'Values:: {list(c.values())}')
print('-'*20)
"""
    Примечание. ChainMap особенно полезны для работы сщ значениями, принадлежащими областям видимости, 
    такими как переменные ЯП (глобальные, локальные и т.п.).
"""
values = ChainMap()
values['x'] = 1
# добавляем новое отображение
values = values.new_child()
values['x'] = 2
# добавляем новое отображение
values = values.new_child()
values['x'] = 3
# добавляем новое отображение
values = values.new_child()
print(values)
print(values['x'])
# Удаляем последнее отображение
values = values.parents
print(values['x'])
# Удаляем последнее отображение
values = values.parents
print(values['x'])
# Удаляем последнее отображение
values = values.parents
print(values['x'])
print(values)
print('-'*20)
"""
    Примечание. В качестве альтернативы можно использовать слияние словарей 
"""
merged = dict(b)
merged.update(a)
print(f'{merged["x"]=}')
print(f'{merged["y"]=}')
print(f'{merged["z"]=}')
print('-'*20)
# Этот случай создает полностью новый словарь и изменение первоначальных не затронут конечный
a['x'] = 13
print(f'{merged["x"]=}')
print('-'*20)
merged = ChainMap(a, b)
print(f'{merged["x"]=}')
a['x'] = 112
print(f'{merged["x"]=}')    # Изменение произошло!

