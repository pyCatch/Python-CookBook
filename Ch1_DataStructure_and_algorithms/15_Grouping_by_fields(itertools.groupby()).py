"""
    Задача. У нас есть последовательность словарей или экземпляров, и мы хотим итерировать по данным,
    сгруппированным по значению конкретного поля(напр. по дате).
    Предположим что мы так же хотим проитерировать по группам данных, объединённых общей датой.
"""
from collections import defaultdict
from itertools import groupby
from operator import itemgetter

rows = [
    {'address': '5412 N CLARK', 'date': '07/01/2012'},
    {'address': '5148 N CLARK', 'date': '07/04/2012'},
    {'address': '5800 E 58TH', 'date': '07/02/2012'},
    {'address': '2122 N CLARK', 'date': '07/03/2012'},
    {'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'},
    {'address': '1060 N ADDISON', 'date': '07/02/2012'},
    {'address': '4801 N BROADWAY', 'date': '07/01/2012'},
    {'address': '1039 N GRANVILLE', 'date': '07/04/2012'}
]

# Сначала отсортируем по нужным полям
rows.sort(key=itemgetter('date'))

# Итерируем в группах
for date, items in groupby(rows, key=itemgetter('date')):
    print(date)
    for i in items:
        print(" ", i)
print('-'*20)
"""
    Примечание. Функция groupby() работает так: сканирует последовательность и ищет последовательные "партии" одинаковых
    значений (или значений, возвращённых переданной через key функцией).В каждой итерации функция возвращает значение 
    вместе в итератором, который выводит все элементы в группу с одинаковым значением.
    Важным предварительным шагом является сортировка данных по интересующему нас полю. Поскольку groupby() проверяет 
    только последовательные элементы, без предварительной сортировки группировка записей выполнена не будет.
"""
"""
    Примечание. Если наша цель - просто сгруппировать данные вместе в крупную структуру данных с произвольным доступом,
    то нам больше поможет defaultdict(), которая создаёт мультисловарь.
"""
rows_by_date = defaultdict(list)
for row in rows:
    rows_by_date[row['date']].append(row)

# Это позволяет легко получить доступ к записям для каждой даты
for r in rows_by_date['07/01/2012']:
    print(r)

"""
    Примечание. В этом примере предварительная сортировка записей не обязательна. Но если мы не заботимся о потреблении 
    памяти, то может оказаться быстрее сделать это с помощью предварительной сортировки и итерирования с использованием
    groupby(). 
"""
