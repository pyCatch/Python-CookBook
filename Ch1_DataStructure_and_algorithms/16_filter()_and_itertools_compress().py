"""
    Задача. Есть данные внутри последовательности и мы хотим извлечь значения по какому то критерию.
"""
import math
from itertools import compress

mylist = [1, 4, -5, 10, -7, 2, 3, -1]
print([n for n in mylist if n > 0])
print([n for n in mylist if n < 0])

"""
    Примечание. Потенциальная проблема с использованием генераторов списков заключается в том, что они могут создать 
    большой результат, если размер входных данных тоже большой. Если это беспокоит то мы можем использовать 
    выражения-генераторы для итеративного возврата отфильтрованных значений.
"""
positive = [n for n in mylist if n > 0]     # type = <class 'list'>
negative = (n for n in mylist if n < 0)     # type = <class 'generator'>
for x in negative:
    print(x)
print('-'*20)

"""
    Примечание. Иногда критерии могут быть сложными, и, например, обработку исключений или какой то дугой сложный 
    момент. Что бы справиться с этим, мы можем поместить фильтрующий код в функцию и использовать встроенную функцию
    filter().
"""
values = ['1', '2', '-3', '-', 'N/A', '5']


def is_int(val):
    try:
        int(val)
        return True
    except ValueError:
        return False


int_values = list(filter(is_int, values))
print(f'{int_values=}')
print('-'*20)

"""
    Примечание. У генераторов списков и выражений-генераторов есть возможность одновременно изменять данные!
"""
mylist = [1, 4, -5, 10, -7, 2, 3, -1]
print([math.sqrt(n) for n in mylist if n > 0])
print('-'*20)

"""
    Примечание. Одна из разновидностей фильтрования включает замену значений, которые не подходят под критерий, другими 
    значениями (вместо отбраковки неподходящих). Например, вместо простого поиска положительных значений мы можем 
    обрезать "плохие" значения что бы они попадали в определенный диапазон. Это можно сделать с помощью перемещения
    критерия фильтрования в условное выражение.
"""
clip_neg = [n if n > 0 else 0 for n in mylist]
clip_pos = [n if n < 0 else 0 for n in mylist]
print(f'{clip_neg=}')
print(f'{clip_pos=}')
print('-'*20)

"""
    Примечание. Другой ВАЖНЫЙ инструмент фильтрации itertools.compress(), который принимает итерируемый объект вместе 
    с последовательностью-селектором из булевых значений. На выходе функция выдаёт все элементы итерируемого объекта,
    для которых совпадающий элемент в селекторе - True. 
"""
# У нас имеется две колонки данных
addresses = [
     '5412 N CLARK',
     '5148 N CLARK',
     '5800 E 58TH',
     '2122 N CLARK',
     '5645 N RAVENSWOOD',
     '1060 N ADDISON',
     '4801 N BROADWAY',
     '1039 N GRANVILLE'
]
counts = [0, 3, 10, 4, 1, 7, 6, 1]
# Мы хотим создать список всех адресов, где соответствующие значения из count больше 5
more5 = [n > 5 for n in counts]
print(f'{more5=}')
print(type(compress(addresses, more5)))     # type = <class 'itertools.compress'>
result = list(compress(addresses, more5))
print(result)
"""
    Примечание. Ключевой момент - сначала создать последовательность булевых значений, которые будут указывать, 
    какие элементы удовлетворяют заданному условию!
"""